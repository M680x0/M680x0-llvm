//=== M680x0InstPrinter.h - Convert M680x0 MCInst to assembly syntax - C++ -==//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This class prints a M680x0 MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_M680X0_INSTPRINTER_M680X0INSTPRINTER_H
#define LLVM_LIB_TARGET_M680X0_INSTPRINTER_M680X0INSTPRINTER_H

#include "llvm/MC/MCInstPrinter.h"

namespace llvm {

class TargetMachine;

class M680x0InstPrinter : public MCInstPrinter {
public:
  M680x0InstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                  const MCRegisterInfo &MRI)
    : MCInstPrinter(MAI, MII, MRI) {}

  // Autogenerated by tblgen.
  void printInstruction(const MCInst *MI, raw_ostream &O);
  static const char *getRegisterName(unsigned RegNo);

  void printRegName(raw_ostream &OS, unsigned RegNo) const override;
  void printInst(const MCInst *MI, raw_ostream &O, StringRef Annot,
                 const MCSubtargetInfo &STI) override;

  bool printAliasInstr(const MCInst *MI, raw_ostream &OS);
  void printCustomAliasOperand(const MCInst *MI, unsigned OpIdx,
                               unsigned PrintMethodIdx, raw_ostream &O);

private:
  void printOperand(const MCInst *MI, unsigned opNo, raw_ostream &O);
  void printUnsignedImm(const MCInst *MI, int opNo, raw_ostream &O);
  void printARIMem(const MCInst *MI, int opNo, raw_ostream &O);
  void printARIPIMem(const MCInst *MI, int opNo, raw_ostream &O);
  void printARIPDMem(const MCInst *MI, int opNo, raw_ostream &O);
  void printARIDMem(const MCInst *MI, int opNo, raw_ostream &O);
  void printARIIwMem(const MCInst *MI, int opNo, raw_ostream &O);
  void printARIIlMem(const MCInst *MI, int opNo, raw_ostream &O);
  void printAbsMem(const MCInst *MI, int opNo, raw_ostream &O);
  void printPCDMem(const MCInst *MI, int opNo, raw_ostream &O);
  void printPCIwMem(const MCInst *MI, int opNo, raw_ostream &O);
  void printPCIlMem(const MCInst *MI, int opNo, raw_ostream &O);

//===----------------------------------------------------------------------===//
// Sized variants
//===----------------------------------------------------------------------===//

  void printARI8Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIMem(MI, opNum, O);
  }
  void printARI16Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIMem(MI, opNum, O);
  }
  void printARI32Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIMem(MI, opNum, O);
  }

  void printARIPI8Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIPIMem(MI, opNum, O);
  }
  void printARIPI16Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIPIMem(MI, opNum, O);
  }
  void printARIPI32Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIPIMem(MI, opNum, O);
  }

  void printARIPD8Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIPDMem(MI, opNum, O);
  }
  void printARIPD16Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIPDMem(MI, opNum, O);
  }
  void printARIPD32Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIPDMem(MI, opNum, O);
  }

  void printARID8Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIDMem(MI, opNum, O);
  }
  void printARID16Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIDMem(MI, opNum, O);
  }
  void printARID32Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIDMem(MI, opNum, O);
  }

  void printARII8wMem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIIwMem(MI, opNum, O);
  }
  void printARII16wMem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIIwMem(MI, opNum, O);
  }
  void printARII32wMem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIIwMem(MI, opNum, O);
  }

  void printARII8lMem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIIlMem(MI, opNum, O);
  }
  void printARII16lMem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIIlMem(MI, opNum, O);
  }
  void printARII32lMem(const MCInst *MI, int opNum, raw_ostream &O) {
      printARIIlMem(MI, opNum, O);
  }

  void printAS8Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printAbsMem(MI, opNum, O);
  }
  void printAS16Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printAbsMem(MI, opNum, O);
  }
  void printAS32Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printAbsMem(MI, opNum, O);
  }

  void printAL8Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printAbsMem(MI, opNum, O);
  }
  void printAL16Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printAbsMem(MI, opNum, O);
  }
  void printAL32Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printAbsMem(MI, opNum, O);
  }

  void printPCD8Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printPCDMem(MI, opNum, O);
  }
  void printPCD16Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printPCDMem(MI, opNum, O);
  }
  void printPCD32Mem(const MCInst *MI, int opNum, raw_ostream &O) {
      printPCDMem(MI, opNum, O);
  }

  void printPCI8wMem(const MCInst *MI, int opNum, raw_ostream &O) {
      printPCIwMem(MI, opNum, O);
  }
  void printPCI16wMem(const MCInst *MI, int opNum, raw_ostream &O) {
      printPCIwMem(MI, opNum, O);
  }
  void printPCI32wMem(const MCInst *MI, int opNum, raw_ostream &O) {
      printPCIwMem(MI, opNum, O);
  }

  void printPCI8lMem(const MCInst *MI, int opNum, raw_ostream &O) {
      printPCIlMem(MI, opNum, O);
  }
  void printPCI16lMem(const MCInst *MI, int opNum, raw_ostream &O) {
      printPCIlMem(MI, opNum, O);
  }
  void printPCI32lMem(const MCInst *MI, int opNum, raw_ostream &O) {
      printPCIlMem(MI, opNum, O);
  }
};
} // end namespace llvm

#endif
