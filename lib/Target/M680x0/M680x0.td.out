/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Instruction Enum Values and Descriptors                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace M680x0 {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    CFI_INSTRUCTION	= 2,
    EH_LABEL	= 3,
    GC_LABEL	= 4,
    KILL	= 5,
    EXTRACT_SUBREG	= 6,
    INSERT_SUBREG	= 7,
    IMPLICIT_DEF	= 8,
    SUBREG_TO_REG	= 9,
    COPY_TO_REGCLASS	= 10,
    DBG_VALUE	= 11,
    REG_SEQUENCE	= 12,
    COPY	= 13,
    BUNDLE	= 14,
    LIFETIME_START	= 15,
    LIFETIME_END	= 16,
    STACKMAP	= 17,
    PATCHPOINT	= 18,
    LOAD_STACK_GUARD	= 19,
    STATEPOINT	= 20,
    LOCAL_ESCAPE	= 21,
    FAULTING_LOAD_OP	= 22,
    PATCHABLE_OP	= 23,
    PATCHABLE_FUNCTION_ENTER	= 24,
    PATCHABLE_RET	= 25,
    G_ADD	= 26,
    G_SUB	= 27,
    G_MUL	= 28,
    G_SDIV	= 29,
    G_UDIV	= 30,
    G_SREM	= 31,
    G_UREM	= 32,
    G_AND	= 33,
    G_OR	= 34,
    G_XOR	= 35,
    G_FRAME_INDEX	= 36,
    G_EXTRACT	= 37,
    G_INSERT	= 38,
    G_SEQUENCE	= 39,
    G_PTRTOINT	= 40,
    G_INTTOPTR	= 41,
    G_BITCAST	= 42,
    G_LOAD	= 43,
    G_STORE	= 44,
    G_BRCOND	= 45,
    G_INTRINSIC	= 46,
    G_INTRINSIC_W_SIDE_EFFECTS	= 47,
    G_ANYEXT	= 48,
    G_TRUNC	= 49,
    G_CONSTANT	= 50,
    G_FCONSTANT	= 51,
    G_SEXT	= 52,
    G_ZEXT	= 53,
    G_SHL	= 54,
    G_LSHR	= 55,
    G_ASHR	= 56,
    G_ICMP	= 57,
    G_FCMP	= 58,
    G_SELECT	= 59,
    G_UADDE	= 60,
    G_USUBE	= 61,
    G_SADDO	= 62,
    G_SSUBO	= 63,
    G_UMULO	= 64,
    G_SMULO	= 65,
    G_FADD	= 66,
    G_FSUB	= 67,
    G_FMUL	= 68,
    G_FDIV	= 69,
    G_FREM	= 70,
    G_FPEXT	= 71,
    G_FPTRUNC	= 72,
    G_FPTOSI	= 73,
    G_FPTOUI	= 74,
    G_SITOFP	= 75,
    G_UITOFP	= 76,
    G_BR	= 77,
    ADD16ir	= 78,
    ADD32ir	= 79,
    ADD8ir	= 80,
    JMP32r	= 81,
    MOV16im	= 82,
    MOV16ir	= 83,
    MOV16mr	= 84,
    MOV16rm	= 85,
    MOV16rr	= 86,
    MOV32im	= 87,
    MOV32ir	= 88,
    MOV32mr	= 89,
    MOV32rm	= 90,
    MOV32rr	= 91,
    MOV8im	= 92,
    MOV8ir	= 93,
    MOV8mr	= 94,
    MOV8rm	= 95,
    MOV8rr	= 96,
    NOP	= 97,
    INSTRUCTION_LIST_END = 98
  };

namespace Sched {
  enum {
    NoInstrModel	= 0,
    SCHED_LIST_END = 1
  };
} // end Sched namespace
} // end M680x0 namespace
} // end llvm namespace
#endif // GET_INSTRINFO_ENUM

#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const MCPhysReg ImplicitList1[] = { M680x0::CCR, 0 };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo10[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { M680x0::DR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { M680x0::DR16RegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { M680x0::DR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { M680x0::DR32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { M680x0::DR32RegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { M680x0::DR32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { M680x0::AR32RegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { M680x0::AR32RegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { M680x0::DR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { M680x0::DR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { M680x0::AR32RegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { M680x0::AR32RegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { M680x0::DR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { M680x0::DR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { M680x0::DR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { M680x0::DR32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { M680x0::DR32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { M680x0::AR32RegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { M680x0::AR32RegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { M680x0::DR32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { M680x0::DR32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { M680x0::DR32RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { M680x0::DR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { M680x0::DR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { M680x0::AR32RegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { M680x0::AR32RegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { M680x0::DR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { M680x0::DR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { M680x0::DR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };

extern const MCInstrDesc M680x0Insts[] = {
  { 0,	1,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #0 = PHI
  { 1,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1 = INLINEASM
  { 2,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::NotDuplicable)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #2 = CFI_INSTRUCTION
  { 3,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::NotDuplicable)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #3 = EH_LABEL
  { 4,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::NotDuplicable)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #4 = GC_LABEL
  { 5,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #5 = KILL
  { 6,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo4, -1 ,nullptr },  // Inst #6 = EXTRACT_SUBREG
  { 7,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo5, -1 ,nullptr },  // Inst #7 = INSERT_SUBREG
  { 8,	1,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #8 = IMPLICIT_DEF
  { 9,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo6, -1 ,nullptr },  // Inst #9 = SUBREG_TO_REG
  { 10,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo4, -1 ,nullptr },  // Inst #10 = COPY_TO_REGCLASS
  { 11,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #11 = DBG_VALUE
  { 12,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #12 = REG_SEQUENCE
  { 13,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #13 = COPY
  { 14,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #14 = BUNDLE
  { 15,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #15 = LIFETIME_START
  { 16,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #16 = LIFETIME_END
  { 17,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo8, -1 ,nullptr },  // Inst #17 = STACKMAP
  { 18,	6,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo9, -1 ,nullptr },  // Inst #18 = PATCHPOINT
  { 19,	1,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Rematerializable), 0x0ULL, nullptr, nullptr, OperandInfo10, -1 ,nullptr },  // Inst #19 = LOAD_STACK_GUARD
  { 20,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #20 = STATEPOINT
  { 21,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo11, -1 ,nullptr },  // Inst #21 = LOCAL_ESCAPE
  { 22,	1,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Branch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #22 = FAULTING_LOAD_OP
  { 23,	1,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #23 = PATCHABLE_OP
  { 24,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #24 = PATCHABLE_FUNCTION_ENTER
  { 25,	1,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #25 = PATCHABLE_RET
  { 26,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #26 = G_ADD
  { 27,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #27 = G_SUB
  { 28,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #28 = G_MUL
  { 29,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #29 = G_SDIV
  { 30,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #30 = G_UDIV
  { 31,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #31 = G_SREM
  { 32,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #32 = G_UREM
  { 33,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #33 = G_AND
  { 34,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #34 = G_OR
  { 35,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #35 = G_XOR
  { 36,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #36 = G_FRAME_INDEX
  { 37,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #37 = G_EXTRACT
  { 38,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #38 = G_INSERT
  { 39,	1,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #39 = G_SEQUENCE
  { 40,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #40 = G_PTRTOINT
  { 41,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #41 = G_INTTOPTR
  { 42,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #42 = G_BITCAST
  { 43,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #43 = G_LOAD
  { 44,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #44 = G_STORE
  { 45,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #45 = G_BRCOND
  { 46,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #46 = G_INTRINSIC
  { 47,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #47 = G_INTRINSIC_W_SIDE_EFFECTS
  { 48,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #48 = G_ANYEXT
  { 49,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #49 = G_TRUNC
  { 50,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #50 = G_CONSTANT
  { 51,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #51 = G_FCONSTANT
  { 52,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #52 = G_SEXT
  { 53,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #53 = G_ZEXT
  { 54,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #54 = G_SHL
  { 55,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #55 = G_LSHR
  { 56,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #56 = G_ASHR
  { 57,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #57 = G_ICMP
  { 58,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #58 = G_FCMP
  { 59,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #59 = G_SELECT
  { 60,	5,	2,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo14, -1 ,nullptr },  // Inst #60 = G_UADDE
  { 61,	5,	2,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo14, -1 ,nullptr },  // Inst #61 = G_USUBE
  { 62,	4,	2,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #62 = G_SADDO
  { 63,	4,	2,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #63 = G_SSUBO
  { 64,	4,	2,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #64 = G_UMULO
  { 65,	4,	2,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #65 = G_SMULO
  { 66,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #66 = G_FADD
  { 67,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #67 = G_FSUB
  { 68,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #68 = G_FMUL
  { 69,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #69 = G_FDIV
  { 70,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #70 = G_FREM
  { 71,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #71 = G_FPEXT
  { 72,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #72 = G_FPTRUNC
  { 73,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #73 = G_FPTOSI
  { 74,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #74 = G_FPTOUI
  { 75,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #75 = G_SITOFP
  { 76,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #76 = G_UITOFP
  { 77,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #77 = G_BR
  { 78,	3,	1,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, ImplicitList1, OperandInfo15, -1 ,nullptr },  // Inst #78 = ADD16ir
  { 79,	3,	1,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, ImplicitList1, OperandInfo16, -1 ,nullptr },  // Inst #79 = ADD32ir
  { 80,	3,	1,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, ImplicitList1, OperandInfo15, -1 ,nullptr },  // Inst #80 = ADD8ir
  { 81,	1,	0,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #81 = JMP32r
  { 82,	2,	0,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, ImplicitList1, OperandInfo18, -1 ,nullptr },  // Inst #82 = MOV16im
  { 83,	2,	1,	0,	0,	0|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, ImplicitList1, OperandInfo19, -1 ,nullptr },  // Inst #83 = MOV16ir
  { 84,	2,	1,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Rematerializable), 0x0ULL, nullptr, ImplicitList1, OperandInfo20, -1 ,nullptr },  // Inst #84 = MOV16mr
  { 85,	2,	0,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::Rematerializable), 0x0ULL, nullptr, ImplicitList1, OperandInfo21, -1 ,nullptr },  // Inst #85 = MOV16rm
  { 86,	2,	1,	0,	0,	0, 0x0ULL, nullptr, ImplicitList1, OperandInfo22, -1 ,nullptr },  // Inst #86 = MOV16rr
  { 87,	2,	0,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, ImplicitList1, OperandInfo18, -1 ,nullptr },  // Inst #87 = MOV32im
  { 88,	2,	1,	0,	0,	0|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, ImplicitList1, OperandInfo23, -1 ,nullptr },  // Inst #88 = MOV32ir
  { 89,	2,	1,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Rematerializable), 0x0ULL, nullptr, ImplicitList1, OperandInfo24, -1 ,nullptr },  // Inst #89 = MOV32mr
  { 90,	2,	0,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::Rematerializable), 0x0ULL, nullptr, ImplicitList1, OperandInfo25, -1 ,nullptr },  // Inst #90 = MOV32rm
  { 91,	2,	1,	0,	0,	0, 0x0ULL, nullptr, ImplicitList1, OperandInfo26, -1 ,nullptr },  // Inst #91 = MOV32rr
  { 92,	2,	0,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, ImplicitList1, OperandInfo18, -1 ,nullptr },  // Inst #92 = MOV8im
  { 93,	2,	1,	0,	0,	0|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, ImplicitList1, OperandInfo27, -1 ,nullptr },  // Inst #93 = MOV8ir
  { 94,	2,	1,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Rematerializable), 0x0ULL, nullptr, ImplicitList1, OperandInfo28, -1 ,nullptr },  // Inst #94 = MOV8mr
  { 95,	2,	0,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::Rematerializable), 0x0ULL, nullptr, ImplicitList1, OperandInfo29, -1 ,nullptr },  // Inst #95 = MOV8rm
  { 96,	2,	1,	0,	0,	0, 0x0ULL, nullptr, ImplicitList1, OperandInfo30, -1 ,nullptr },  // Inst #96 = MOV8rr
  { 97,	0,	0,	0,	0,	0, 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #97 = NOP
};

extern const char M680x0InstrNameData[] = {
  /* 0 */ 'G', '_', 'F', 'S', 'U', 'B', 0,
  /* 7 */ 'G', '_', 'S', 'U', 'B', 0,
  /* 13 */ 'G', '_', 'I', 'N', 'T', 'R', 'I', 'N', 'S', 'I', 'C', 0,
  /* 25 */ 'G', '_', 'F', 'P', 'T', 'R', 'U', 'N', 'C', 0,
  /* 35 */ 'G', '_', 'T', 'R', 'U', 'N', 'C', 0,
  /* 43 */ 'G', '_', 'L', 'O', 'A', 'D', 0,
  /* 50 */ 'G', '_', 'F', 'A', 'D', 'D', 0,
  /* 57 */ 'G', '_', 'A', 'D', 'D', 0,
  /* 63 */ 'G', '_', 'A', 'N', 'D', 0,
  /* 69 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 82 */ 'G', '_', 'B', 'R', 'C', 'O', 'N', 'D', 0,
  /* 91 */ 'L', 'O', 'A', 'D', '_', 'S', 'T', 'A', 'C', 'K', '_', 'G', 'U', 'A', 'R', 'D', 0,
  /* 108 */ 'G', '_', 'U', 'S', 'U', 'B', 'E', 0,
  /* 116 */ 'R', 'E', 'G', '_', 'S', 'E', 'Q', 'U', 'E', 'N', 'C', 'E', 0,
  /* 129 */ 'G', '_', 'U', 'A', 'D', 'D', 'E', 0,
  /* 137 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 144 */ 'L', 'O', 'C', 'A', 'L', '_', 'E', 'S', 'C', 'A', 'P', 'E', 0,
  /* 157 */ 'G', '_', 'S', 'T', 'O', 'R', 'E', 0,
  /* 165 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 175 */ 'I', 'M', 'P', 'L', 'I', 'C', 'I', 'T', '_', 'D', 'E', 'F', 0,
  /* 188 */ 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 203 */ 'I', 'N', 'S', 'E', 'R', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 217 */ 'S', 'U', 'B', 'R', 'E', 'G', '_', 'T', 'O', '_', 'R', 'E', 'G', 0,
  /* 231 */ 'P', 'H', 'I', 0,
  /* 235 */ 'G', '_', 'F', 'P', 'T', 'O', 'S', 'I', 0,
  /* 244 */ 'G', '_', 'F', 'P', 'T', 'O', 'U', 'I', 0,
  /* 253 */ 'G', 'C', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 262 */ 'E', 'H', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 271 */ 'G', '_', 'S', 'H', 'L', 0,
  /* 277 */ 'K', 'I', 'L', 'L', 0,
  /* 282 */ 'G', '_', 'F', 'M', 'U', 'L', 0,
  /* 289 */ 'G', '_', 'M', 'U', 'L', 0,
  /* 295 */ 'G', '_', 'F', 'R', 'E', 'M', 0,
  /* 302 */ 'G', '_', 'S', 'R', 'E', 'M', 0,
  /* 309 */ 'G', '_', 'U', 'R', 'E', 'M', 0,
  /* 316 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', 0,
  /* 326 */ 'C', 'F', 'I', '_', 'I', 'N', 'S', 'T', 'R', 'U', 'C', 'T', 'I', 'O', 'N', 0,
  /* 342 */ 'G', '_', 'S', 'S', 'U', 'B', 'O', 0,
  /* 350 */ 'G', '_', 'S', 'A', 'D', 'D', 'O', 0,
  /* 358 */ 'G', '_', 'S', 'M', 'U', 'L', 'O', 0,
  /* 366 */ 'G', '_', 'U', 'M', 'U', 'L', 'O', 0,
  /* 374 */ 'S', 'T', 'A', 'C', 'K', 'M', 'A', 'P', 0,
  /* 383 */ 'G', '_', 'S', 'I', 'T', 'O', 'F', 'P', 0,
  /* 392 */ 'G', '_', 'U', 'I', 'T', 'O', 'F', 'P', 0,
  /* 401 */ 'G', '_', 'F', 'C', 'M', 'P', 0,
  /* 408 */ 'G', '_', 'I', 'C', 'M', 'P', 0,
  /* 415 */ 'N', 'O', 'P', 0,
  /* 419 */ 'F', 'A', 'U', 'L', 'T', 'I', 'N', 'G', '_', 'L', 'O', 'A', 'D', '_', 'O', 'P', 0,
  /* 436 */ 'P', 'A', 'T', 'C', 'H', 'A', 'B', 'L', 'E', '_', 'O', 'P', 0,
  /* 449 */ 'G', '_', 'B', 'R', 0,
  /* 454 */ 'P', 'A', 'T', 'C', 'H', 'A', 'B', 'L', 'E', '_', 'F', 'U', 'N', 'C', 'T', 'I', 'O', 'N', '_', 'E', 'N', 'T', 'E', 'R', 0,
  /* 479 */ 'G', '_', 'A', 'S', 'H', 'R', 0,
  /* 486 */ 'G', '_', 'L', 'S', 'H', 'R', 0,
  /* 493 */ 'G', '_', 'X', 'O', 'R', 0,
  /* 499 */ 'G', '_', 'O', 'R', 0,
  /* 504 */ 'G', '_', 'I', 'N', 'T', 'T', 'O', 'P', 'T', 'R', 0,
  /* 515 */ 'C', 'O', 'P', 'Y', '_', 'T', 'O', '_', 'R', 'E', 'G', 'C', 'L', 'A', 'S', 'S', 0,
  /* 532 */ 'G', '_', 'I', 'N', 'T', 'R', 'I', 'N', 'S', 'I', 'C', '_', 'W', '_', 'S', 'I', 'D', 'E', '_', 'E', 'F', 'F', 'E', 'C', 'T', 'S', 0,
  /* 559 */ 'G', '_', 'E', 'X', 'T', 'R', 'A', 'C', 'T', 0,
  /* 569 */ 'G', '_', 'S', 'E', 'L', 'E', 'C', 'T', 0,
  /* 578 */ 'P', 'A', 'T', 'C', 'H', 'A', 'B', 'L', 'E', '_', 'R', 'E', 'T', 0,
  /* 592 */ 'G', '_', 'F', 'C', 'O', 'N', 'S', 'T', 'A', 'N', 'T', 0,
  /* 604 */ 'G', '_', 'C', 'O', 'N', 'S', 'T', 'A', 'N', 'T', 0,
  /* 615 */ 'S', 'T', 'A', 'T', 'E', 'P', 'O', 'I', 'N', 'T', 0,
  /* 626 */ 'P', 'A', 'T', 'C', 'H', 'P', 'O', 'I', 'N', 'T', 0,
  /* 637 */ 'G', '_', 'P', 'T', 'R', 'T', 'O', 'I', 'N', 'T', 0,
  /* 648 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 663 */ 'G', '_', 'I', 'N', 'S', 'E', 'R', 'T', 0,
  /* 672 */ 'G', '_', 'B', 'I', 'T', 'C', 'A', 'S', 'T', 0,
  /* 682 */ 'G', '_', 'F', 'P', 'E', 'X', 'T', 0,
  /* 690 */ 'G', '_', 'S', 'E', 'X', 'T', 0,
  /* 697 */ 'G', '_', 'A', 'N', 'Y', 'E', 'X', 'T', 0,
  /* 706 */ 'G', '_', 'Z', 'E', 'X', 'T', 0,
  /* 713 */ 'G', '_', 'F', 'D', 'I', 'V', 0,
  /* 720 */ 'G', '_', 'S', 'D', 'I', 'V', 0,
  /* 727 */ 'G', '_', 'U', 'D', 'I', 'V', 0,
  /* 734 */ 'G', '_', 'F', 'R', 'A', 'M', 'E', '_', 'I', 'N', 'D', 'E', 'X', 0,
  /* 748 */ 'C', 'O', 'P', 'Y', 0,
  /* 753 */ 'M', 'O', 'V', '3', '2', 'i', 'm', 0,
  /* 761 */ 'M', 'O', 'V', '1', '6', 'i', 'm', 0,
  /* 769 */ 'M', 'O', 'V', '8', 'i', 'm', 0,
  /* 776 */ 'M', 'O', 'V', '3', '2', 'r', 'm', 0,
  /* 784 */ 'M', 'O', 'V', '1', '6', 'r', 'm', 0,
  /* 792 */ 'M', 'O', 'V', '8', 'r', 'm', 0,
  /* 799 */ 'J', 'M', 'P', '3', '2', 'r', 0,
  /* 806 */ 'A', 'D', 'D', '3', '2', 'i', 'r', 0,
  /* 814 */ 'M', 'O', 'V', '3', '2', 'i', 'r', 0,
  /* 822 */ 'A', 'D', 'D', '1', '6', 'i', 'r', 0,
  /* 830 */ 'M', 'O', 'V', '1', '6', 'i', 'r', 0,
  /* 838 */ 'A', 'D', 'D', '8', 'i', 'r', 0,
  /* 845 */ 'M', 'O', 'V', '8', 'i', 'r', 0,
  /* 852 */ 'M', 'O', 'V', '3', '2', 'm', 'r', 0,
  /* 860 */ 'M', 'O', 'V', '1', '6', 'm', 'r', 0,
  /* 868 */ 'M', 'O', 'V', '8', 'm', 'r', 0,
  /* 875 */ 'M', 'O', 'V', '3', '2', 'r', 'r', 0,
  /* 883 */ 'M', 'O', 'V', '1', '6', 'r', 'r', 0,
  /* 891 */ 'M', 'O', 'V', '8', 'r', 'r', 0,
};

extern const unsigned M680x0InstrNameIndices[] = {
    231U, 316U, 326U, 262U, 253U, 277U, 188U, 203U,
    175U, 217U, 515U, 165U, 116U, 748U, 137U, 648U,
    69U, 374U, 626U, 91U, 615U, 144U, 419U, 436U,
    454U, 578U, 57U, 7U, 289U, 720U, 727U, 302U,
    309U, 63U, 499U, 493U, 734U, 559U, 663U, 118U,
    637U, 504U, 672U, 43U, 157U, 82U, 13U, 532U,
    697U, 35U, 604U, 592U, 690U, 706U, 271U, 486U,
    479U, 408U, 401U, 569U, 129U, 108U, 350U, 342U,
    366U, 358U, 50U, 0U, 282U, 713U, 295U, 682U,
    25U, 235U, 244U, 383U, 392U, 449U, 822U, 806U,
    838U, 799U, 761U, 830U, 860U, 784U, 883U, 753U,
    814U, 852U, 776U, 875U, 769U, 845U, 868U, 792U,
    891U, 415U,
};

static inline void InitM680x0MCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(M680x0Insts, M680x0InstrNameIndices, M680x0InstrNameData, 98);
}

} // end llvm namespace
#endif // GET_INSTRINFO_MC_DESC

#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct M680x0GenInstrInfo : public TargetInstrInfo {
  explicit M680x0GenInstrInfo(int CFSetupOpcode = -1, int CFDestroyOpcode = -1, int CatchRetOpcode = -1, int ReturnOpcode = -1);
  ~M680x0GenInstrInfo() override {}
};
} // end llvm namespace
#endif // GET_INSTRINFO_HEADER

#ifdef GET_INSTRINFO_CTOR_DTOR
#undef GET_INSTRINFO_CTOR_DTOR
namespace llvm {
extern const MCInstrDesc M680x0Insts[];
extern const unsigned M680x0InstrNameIndices[];
extern const char M680x0InstrNameData[];
M680x0GenInstrInfo::M680x0GenInstrInfo(int CFSetupOpcode, int CFDestroyOpcode, int CatchRetOpcode, int ReturnOpcode)
  : TargetInstrInfo(CFSetupOpcode, CFDestroyOpcode, CatchRetOpcode, ReturnOpcode) {
  InitMCInstrInfo(M680x0Insts, M680x0InstrNameIndices, M680x0InstrNameData, 98);
}
} // end llvm namespace
#endif // GET_INSTRINFO_CTOR_DTOR

#ifdef GET_INSTRINFO_OPERAND_ENUM
#undef GET_INSTRINFO_OPERAND_ENUM
namespace llvm {
namespace M680x0 {
namespace OpName {
enum {
OPERAND_LAST
};
} // end namespace OpName
} // end namespace M680x0
} // end namespace llvm
#endif //GET_INSTRINFO_OPERAND_ENUM

#ifdef GET_INSTRINFO_NAMED_OPS
#undef GET_INSTRINFO_NAMED_OPS
namespace llvm {
namespace M680x0 {
LLVM_READONLY
int16_t getNamedOperandIdx(uint16_t Opcode, uint16_t NamedIdx) {
  return -1;
}
} // end namespace M680x0
} // end namespace llvm
#endif //GET_INSTRINFO_NAMED_OPS

#ifdef GET_INSTRINFO_OPERAND_TYPES_ENUM
#undef GET_INSTRINFO_OPERAND_TYPES_ENUM
namespace llvm {
namespace M680x0 {
namespace OpTypes {
enum OperandType {
  M680x0_AL16 = 0,
  M680x0_AL32 = 1,
  M680x0_AL8 = 2,
  M680x0_ARI16 = 3,
  M680x0_ARI32 = 4,
  M680x0_ARI8 = 5,
  M680x0_ARID16 = 6,
  M680x0_ARID32 = 7,
  M680x0_ARID8 = 8,
  M680x0_ARII16l = 9,
  M680x0_ARII16w = 10,
  M680x0_ARII32l = 11,
  M680x0_ARII32w = 12,
  M680x0_ARII8l = 13,
  M680x0_ARII8w = 14,
  M680x0_ARIPD16 = 15,
  M680x0_ARIPD32 = 16,
  M680x0_ARIPD8 = 17,
  M680x0_ARIPI16 = 18,
  M680x0_ARIPI32 = 19,
  M680x0_ARIPI8 = 20,
  M680x0_AS16 = 21,
  M680x0_AS32 = 22,
  M680x0_AS8 = 23,
  M680x0_Imm16 = 24,
  M680x0_Imm32 = 25,
  M680x0_Imm8 = 26,
  M680x0_PCD16 = 27,
  M680x0_PCD32 = 28,
  M680x0_PCD8 = 29,
  M680x0_PCI16l = 30,
  M680x0_PCI16w = 31,
  M680x0_PCI32l = 32,
  M680x0_PCI32w = 33,
  M680x0_PCI8l = 34,
  M680x0_PCI8w = 35,
  f32imm = 36,
  f64imm = 37,
  i16imm = 38,
  i1imm = 39,
  i32imm = 40,
  i64imm = 41,
  i8imm = 42,
  OPERAND_TYPE_LIST_END
};
} // end namespace OpTypes
} // end namespace M680x0
} // end namespace llvm
#endif // GET_INSTRINFO_OPERAND_TYPES_ENUM
