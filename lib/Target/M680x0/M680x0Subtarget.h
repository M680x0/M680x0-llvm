//===-- M680x0Subtarget.h - Define Subtarget for the M680x0 ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the M680x0 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_CPU0_M680X0SUBTARGET_H
#define LLVM_LIB_TARGET_CPU0_M680X0SUBTARGET_H

#include "M680x0ISelLowering.h"
#include "M680x0FrameLowering.h"
#include "M680x0InstrInfo.h"

#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "M680x0GenSubtargetInfo.inc"

extern bool M680x0ReserveGP;
extern bool M680x0NoCpload;

namespace llvm {
class StringRef;

class M680x0TargetMachine;

/// The M680x0 backend supports a number of different styles of PIC.
namespace PICStyles {
enum Style {
  GOT,
  PCRel,
  None
};
}

class M680x0Subtarget : public M680x0GenSubtargetInfo {
  virtual void anchor();

protected:

  bool EnableOverflow;

  InstrItineraryData InstrItins;

  // UseSmallSection - Small section is used.
  bool UseSmallSection;

  /// Which PIC style to use
  PICStyles::Style PICStyle;

  const M680x0TargetMachine &TM;

  SelectionDAGTargetInfo TSInfo;
  M680x0InstrInfo        InstrInfo;
  M680x0FrameLowering    FrameLowering;
  M680x0TargetLowering   TLInfo;

  Triple TargetTriple;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  M680x0Subtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                 const M680x0TargetMachine &_TM);

  //- Vitual function, must have
  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  /// Features related to the presence of specific instructions.
  bool enableOverflow() const { return EnableOverflow; }
  bool disableOverflow() const { return !EnableOverflow; }

  bool useSmallSection() const { return UseSmallSection; }

  bool abiUsesSoftFloat() const;

  PICStyles::Style getPICStyle() const { return PICStyle; }
  void setPICStyle(PICStyles::Style Style)  { PICStyle = Style; }

  bool isPICStyleGOT()    const { return PICStyle == PICStyles::GOT;     }
  bool isPICStylePCRel()  const { return PICStyle == PICStyles::PCRel;  }

  const Triple &getTargetTriple() const { return TargetTriple; }

  bool isTargetELF() const { return TargetTriple.isOSBinFormatELF(); }

  /// Return true if the subtarget allows calls to immediate address.
  bool isLegalToCallImmediateAddr() const;

  bool isPositionIndependent() const;

  /// Classify a global variable reference for the current subtarget according
  /// to how we should reference it in a non-pcrel context.
  unsigned char classifyLocalReference(const GlobalValue *GV) const;


  /// Classify a global variable reference for the current subtarget according
  /// to how we should reference it in a non-pcrel context.
  unsigned char classifyGlobalReference(const GlobalValue *GV,
                                        const Module &M) const;
  unsigned char classifyGlobalReference(const GlobalValue *GV) const;

  /// Classify a global function reference for the current subtarget.
  unsigned char classifyGlobalFunctionReference(const GlobalValue *GV,
                                                const Module &M) const;
  unsigned char classifyGlobalFunctionReference(const GlobalValue *GV) const;

  /// Classify a blockaddress reference for the current subtarget according to
  /// how we should reference it in a non-pcrel context.
  unsigned char classifyBlockAddressReference() const;

  /// TODO this must be controlled by options like -malign-int and -mshort
  unsigned getStackAlignment() const { return 4; }

  /// getSlotSize - Stack slot size in bytes.
  unsigned getSlotSize() const { return 4; }

  M680x0Subtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                 const M680x0TargetMachine &TM);

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

  const M680x0InstrInfo *getInstrInfo() const override {
    return &InstrInfo;
  }

  const M680x0FrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }

  const M680x0RegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }

  const M680x0TargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }

  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
};
} // End llvm namespace

#endif
